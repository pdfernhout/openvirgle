# listeners.py
# NOTE: This file is generated by listeners_generateFile.py
# ANY CHANGES HERE WILL BE LOST THE NEXT TIME THIS FILE IS REGENERATED

from listeners_support import DispatchEventForPath

# A list of all these listeners, each which has metadata about its names and fields
AllDynamicListenerClasses = []

from java.awt.event import ActionListener
class DynamicActionListener(ActionListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "ActionListener"
    dynamicClassName = "DynamicActionListener"
    fieldNames = ("actionPerformed", )

    def __init__(self, actionPerformed="", model=None):
        self.model = model
        self.actionPerformedPathSpecification = actionPerformed

    def actionPerformed(self, event):
        DispatchEventForPath(event, self.model, self.actionPerformedPathSpecification)

AllDynamicListenerClasses.append(DynamicActionListener)

from java.awt.event import AdjustmentListener
class DynamicAdjustmentListener(AdjustmentListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "AdjustmentListener"
    dynamicClassName = "DynamicAdjustmentListener"
    fieldNames = ("adjustmentValueChanged", )

    def __init__(self, adjustmentValueChanged="", model=None):
        self.model = model
        self.adjustmentValueChangedPathSpecification = adjustmentValueChanged

    def adjustmentValueChanged(self, event):
        DispatchEventForPath(event, self.model, self.adjustmentValueChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicAdjustmentListener)

from java.awt.event import AWTEventListener
class DynamicAWTEventListener(AWTEventListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "AWTEventListener"
    dynamicClassName = "DynamicAWTEventListener"
    fieldNames = ("eventDispatched", )

    def __init__(self, eventDispatched="", model=None):
        self.model = model
        self.eventDispatchedPathSpecification = eventDispatched

    def eventDispatched(self, event):
        DispatchEventForPath(event, self.model, self.eventDispatchedPathSpecification)

AllDynamicListenerClasses.append(DynamicAWTEventListener)

from java.awt.event import ComponentListener
class DynamicComponentListener(ComponentListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "ComponentListener"
    dynamicClassName = "DynamicComponentListener"
    fieldNames = ("componentHidden", "componentMoved", "componentResized", "componentShown", )

    def __init__(self, componentHidden="", componentMoved="", componentResized="", componentShown="", model=None):
        self.model = model
        self.componentHiddenPathSpecification = componentHidden
        self.componentMovedPathSpecification = componentMoved
        self.componentResizedPathSpecification = componentResized
        self.componentShownPathSpecification = componentShown

    def componentHidden(self, event):
        DispatchEventForPath(event, self.model, self.componentHiddenPathSpecification)

    def componentMoved(self, event):
        DispatchEventForPath(event, self.model, self.componentMovedPathSpecification)

    def componentResized(self, event):
        DispatchEventForPath(event, self.model, self.componentResizedPathSpecification)

    def componentShown(self, event):
        DispatchEventForPath(event, self.model, self.componentShownPathSpecification)

AllDynamicListenerClasses.append(DynamicComponentListener)

from java.awt.event import ContainerListener
class DynamicContainerListener(ContainerListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "ContainerListener"
    dynamicClassName = "DynamicContainerListener"
    fieldNames = ("componentAdded", "componentRemoved", )

    def __init__(self, componentAdded="", componentRemoved="", model=None):
        self.model = model
        self.componentAddedPathSpecification = componentAdded
        self.componentRemovedPathSpecification = componentRemoved

    def componentAdded(self, event):
        DispatchEventForPath(event, self.model, self.componentAddedPathSpecification)

    def componentRemoved(self, event):
        DispatchEventForPath(event, self.model, self.componentRemovedPathSpecification)

AllDynamicListenerClasses.append(DynamicContainerListener)

from java.awt.event import FocusListener
class DynamicFocusListener(FocusListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "FocusListener"
    dynamicClassName = "DynamicFocusListener"
    fieldNames = ("focusGained", "focusLost", )

    def __init__(self, focusGained="", focusLost="", model=None):
        self.model = model
        self.focusGainedPathSpecification = focusGained
        self.focusLostPathSpecification = focusLost

    def focusGained(self, event):
        DispatchEventForPath(event, self.model, self.focusGainedPathSpecification)

    def focusLost(self, event):
        DispatchEventForPath(event, self.model, self.focusLostPathSpecification)

AllDynamicListenerClasses.append(DynamicFocusListener)

from java.awt.event import HierarchyBoundsListener
class DynamicHierarchyBoundsListener(HierarchyBoundsListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "HierarchyBoundsListener"
    dynamicClassName = "DynamicHierarchyBoundsListener"
    fieldNames = ("ancestorMoved", "ancestorResized", )

    def __init__(self, ancestorMoved="", ancestorResized="", model=None):
        self.model = model
        self.ancestorMovedPathSpecification = ancestorMoved
        self.ancestorResizedPathSpecification = ancestorResized

    def ancestorMoved(self, event):
        DispatchEventForPath(event, self.model, self.ancestorMovedPathSpecification)

    def ancestorResized(self, event):
        DispatchEventForPath(event, self.model, self.ancestorResizedPathSpecification)

AllDynamicListenerClasses.append(DynamicHierarchyBoundsListener)

from java.awt.event import HierarchyListener
class DynamicHierarchyListener(HierarchyListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "HierarchyListener"
    dynamicClassName = "DynamicHierarchyListener"
    fieldNames = ("hierarchyChanged", )

    def __init__(self, hierarchyChanged="", model=None):
        self.model = model
        self.hierarchyChangedPathSpecification = hierarchyChanged

    def hierarchyChanged(self, event):
        DispatchEventForPath(event, self.model, self.hierarchyChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicHierarchyListener)

from java.awt.event import InputMethodListener
class DynamicInputMethodListener(InputMethodListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "InputMethodListener"
    dynamicClassName = "DynamicInputMethodListener"
    fieldNames = ("caretPositionChanged", "inputMethodTextChanged", )

    def __init__(self, caretPositionChanged="", inputMethodTextChanged="", model=None):
        self.model = model
        self.caretPositionChangedPathSpecification = caretPositionChanged
        self.inputMethodTextChangedPathSpecification = inputMethodTextChanged

    def caretPositionChanged(self, event):
        DispatchEventForPath(event, self.model, self.caretPositionChangedPathSpecification)

    def inputMethodTextChanged(self, event):
        DispatchEventForPath(event, self.model, self.inputMethodTextChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicInputMethodListener)

from java.awt.event import ItemListener
class DynamicItemListener(ItemListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "ItemListener"
    dynamicClassName = "DynamicItemListener"
    fieldNames = ("itemStateChanged", )

    def __init__(self, itemStateChanged="", model=None):
        self.model = model
        self.itemStateChangedPathSpecification = itemStateChanged

    def itemStateChanged(self, event):
        DispatchEventForPath(event, self.model, self.itemStateChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicItemListener)

from java.awt.event import KeyListener
class DynamicKeyListener(KeyListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "KeyListener"
    dynamicClassName = "DynamicKeyListener"
    fieldNames = ("keyPressed", "keyReleased", "keyTyped", )

    def __init__(self, keyPressed="", keyReleased="", keyTyped="", model=None):
        self.model = model
        self.keyPressedPathSpecification = keyPressed
        self.keyReleasedPathSpecification = keyReleased
        self.keyTypedPathSpecification = keyTyped

    def keyPressed(self, event):
        DispatchEventForPath(event, self.model, self.keyPressedPathSpecification)

    def keyReleased(self, event):
        DispatchEventForPath(event, self.model, self.keyReleasedPathSpecification)

    def keyTyped(self, event):
        DispatchEventForPath(event, self.model, self.keyTypedPathSpecification)

AllDynamicListenerClasses.append(DynamicKeyListener)

from java.awt.event import MouseListener
class DynamicMouseListener(MouseListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "MouseListener"
    dynamicClassName = "DynamicMouseListener"
    fieldNames = ("mouseClicked", "mouseEntered", "mouseExited", "mousePressed", "mouseReleased", )

    def __init__(self, mouseClicked="", mouseEntered="", mouseExited="", mousePressed="", mouseReleased="", model=None):
        self.model = model
        self.mouseClickedPathSpecification = mouseClicked
        self.mouseEnteredPathSpecification = mouseEntered
        self.mouseExitedPathSpecification = mouseExited
        self.mousePressedPathSpecification = mousePressed
        self.mouseReleasedPathSpecification = mouseReleased

    def mouseClicked(self, event):
        DispatchEventForPath(event, self.model, self.mouseClickedPathSpecification)

    def mouseEntered(self, event):
        DispatchEventForPath(event, self.model, self.mouseEnteredPathSpecification)

    def mouseExited(self, event):
        DispatchEventForPath(event, self.model, self.mouseExitedPathSpecification)

    def mousePressed(self, event):
        DispatchEventForPath(event, self.model, self.mousePressedPathSpecification)

    def mouseReleased(self, event):
        DispatchEventForPath(event, self.model, self.mouseReleasedPathSpecification)

AllDynamicListenerClasses.append(DynamicMouseListener)

from java.awt.event import MouseMotionListener
class DynamicMouseMotionListener(MouseMotionListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "MouseMotionListener"
    dynamicClassName = "DynamicMouseMotionListener"
    fieldNames = ("mouseDragged", "mouseMoved", )

    def __init__(self, mouseDragged="", mouseMoved="", model=None):
        self.model = model
        self.mouseDraggedPathSpecification = mouseDragged
        self.mouseMovedPathSpecification = mouseMoved

    def mouseDragged(self, event):
        DispatchEventForPath(event, self.model, self.mouseDraggedPathSpecification)

    def mouseMoved(self, event):
        DispatchEventForPath(event, self.model, self.mouseMovedPathSpecification)

AllDynamicListenerClasses.append(DynamicMouseMotionListener)

from java.awt.event import MouseWheelListener
class DynamicMouseWheelListener(MouseWheelListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "MouseWheelListener"
    dynamicClassName = "DynamicMouseWheelListener"
    fieldNames = ("mouseWheelMoved", )

    def __init__(self, mouseWheelMoved="", model=None):
        self.model = model
        self.mouseWheelMovedPathSpecification = mouseWheelMoved

    def mouseWheelMoved(self, event):
        DispatchEventForPath(event, self.model, self.mouseWheelMovedPathSpecification)

AllDynamicListenerClasses.append(DynamicMouseWheelListener)

from java.awt.event import TextListener
class DynamicTextListener(TextListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "TextListener"
    dynamicClassName = "DynamicTextListener"
    fieldNames = ("textValueChanged", )

    def __init__(self, textValueChanged="", model=None):
        self.model = model
        self.textValueChangedPathSpecification = textValueChanged

    def textValueChanged(self, event):
        DispatchEventForPath(event, self.model, self.textValueChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicTextListener)

from java.awt.event import WindowFocusListener
class DynamicWindowFocusListener(WindowFocusListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "WindowFocusListener"
    dynamicClassName = "DynamicWindowFocusListener"
    fieldNames = ("windowGainedFocus", "windowLostFocus", )

    def __init__(self, windowGainedFocus="", windowLostFocus="", model=None):
        self.model = model
        self.windowGainedFocusPathSpecification = windowGainedFocus
        self.windowLostFocusPathSpecification = windowLostFocus

    def windowGainedFocus(self, event):
        DispatchEventForPath(event, self.model, self.windowGainedFocusPathSpecification)

    def windowLostFocus(self, event):
        DispatchEventForPath(event, self.model, self.windowLostFocusPathSpecification)

AllDynamicListenerClasses.append(DynamicWindowFocusListener)

from java.awt.event import WindowListener
class DynamicWindowListener(WindowListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "WindowListener"
    dynamicClassName = "DynamicWindowListener"
    fieldNames = ("windowActivated", "windowClosed", "windowClosing", "windowDeactivated", "windowDeiconified", "windowIconified", "windowOpened", )

    def __init__(self, windowActivated="", windowClosed="", windowClosing="", windowDeactivated="", windowDeiconified="", windowIconified="", windowOpened="", model=None):
        self.model = model
        self.windowActivatedPathSpecification = windowActivated
        self.windowClosedPathSpecification = windowClosed
        self.windowClosingPathSpecification = windowClosing
        self.windowDeactivatedPathSpecification = windowDeactivated
        self.windowDeiconifiedPathSpecification = windowDeiconified
        self.windowIconifiedPathSpecification = windowIconified
        self.windowOpenedPathSpecification = windowOpened

    def windowActivated(self, event):
        DispatchEventForPath(event, self.model, self.windowActivatedPathSpecification)

    def windowClosed(self, event):
        DispatchEventForPath(event, self.model, self.windowClosedPathSpecification)

    def windowClosing(self, event):
        DispatchEventForPath(event, self.model, self.windowClosingPathSpecification)

    def windowDeactivated(self, event):
        DispatchEventForPath(event, self.model, self.windowDeactivatedPathSpecification)

    def windowDeiconified(self, event):
        DispatchEventForPath(event, self.model, self.windowDeiconifiedPathSpecification)

    def windowIconified(self, event):
        DispatchEventForPath(event, self.model, self.windowIconifiedPathSpecification)

    def windowOpened(self, event):
        DispatchEventForPath(event, self.model, self.windowOpenedPathSpecification)

AllDynamicListenerClasses.append(DynamicWindowListener)

from java.awt.event import WindowStateListener
class DynamicWindowStateListener(WindowStateListener):
    packageForListenerClass = "java.awt.event"
    listenerClassName = "WindowStateListener"
    dynamicClassName = "DynamicWindowStateListener"
    fieldNames = ("windowStateChanged", )

    def __init__(self, windowStateChanged="", model=None):
        self.model = model
        self.windowStateChangedPathSpecification = windowStateChanged

    def windowStateChanged(self, event):
        DispatchEventForPath(event, self.model, self.windowStateChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicWindowStateListener)

from java.awt.dnd import DragGestureListener
class DynamicDragGestureListener(DragGestureListener):
    packageForListenerClass = "java.awt.dnd"
    listenerClassName = "DragGestureListener"
    dynamicClassName = "DynamicDragGestureListener"
    fieldNames = ("dragGestureRecognized", )

    def __init__(self, dragGestureRecognized="", model=None):
        self.model = model
        self.dragGestureRecognizedPathSpecification = dragGestureRecognized

    def dragGestureRecognized(self, event):
        DispatchEventForPath(event, self.model, self.dragGestureRecognizedPathSpecification)

AllDynamicListenerClasses.append(DynamicDragGestureListener)

from java.awt.dnd import DragSourceListener
class DynamicDragSourceListener(DragSourceListener):
    packageForListenerClass = "java.awt.dnd"
    listenerClassName = "DragSourceListener"
    dynamicClassName = "DynamicDragSourceListener"
    fieldNames = ("dragDropEnd", "dragEnter", "dragExit", "dragOver", "dropActionChanged", )

    def __init__(self, dragDropEnd="", dragEnter="", dragExit="", dragOver="", dropActionChanged="", model=None):
        self.model = model
        self.dragDropEndPathSpecification = dragDropEnd
        self.dragEnterPathSpecification = dragEnter
        self.dragExitPathSpecification = dragExit
        self.dragOverPathSpecification = dragOver
        self.dropActionChangedPathSpecification = dropActionChanged

    def dragDropEnd(self, event):
        DispatchEventForPath(event, self.model, self.dragDropEndPathSpecification)

    def dragEnter(self, event):
        DispatchEventForPath(event, self.model, self.dragEnterPathSpecification)

    def dragExit(self, event):
        DispatchEventForPath(event, self.model, self.dragExitPathSpecification)

    def dragOver(self, event):
        DispatchEventForPath(event, self.model, self.dragOverPathSpecification)

    def dropActionChanged(self, event):
        DispatchEventForPath(event, self.model, self.dropActionChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicDragSourceListener)

from java.awt.dnd import DragSourceMotionListener
class DynamicDragSourceMotionListener(DragSourceMotionListener):
    packageForListenerClass = "java.awt.dnd"
    listenerClassName = "DragSourceMotionListener"
    dynamicClassName = "DynamicDragSourceMotionListener"
    fieldNames = ("dragMouseMoved", )

    def __init__(self, dragMouseMoved="", model=None):
        self.model = model
        self.dragMouseMovedPathSpecification = dragMouseMoved

    def dragMouseMoved(self, event):
        DispatchEventForPath(event, self.model, self.dragMouseMovedPathSpecification)

AllDynamicListenerClasses.append(DynamicDragSourceMotionListener)

from java.awt.dnd import DropTargetListener
class DynamicDropTargetListener(DropTargetListener):
    packageForListenerClass = "java.awt.dnd"
    listenerClassName = "DropTargetListener"
    dynamicClassName = "DynamicDropTargetListener"
    fieldNames = ("drop", "dragEnter", "dragExit", "dragOver", "dropActionChanged", )

    def __init__(self, drop="", dragEnter="", dragExit="", dragOver="", dropActionChanged="", model=None):
        self.model = model
        self.dropPathSpecification = drop
        self.dragEnterPathSpecification = dragEnter
        self.dragExitPathSpecification = dragExit
        self.dragOverPathSpecification = dragOver
        self.dropActionChangedPathSpecification = dropActionChanged

    def drop(self, event):
        DispatchEventForPath(event, self.model, self.dropPathSpecification)

    def dragEnter(self, event):
        DispatchEventForPath(event, self.model, self.dragEnterPathSpecification)

    def dragExit(self, event):
        DispatchEventForPath(event, self.model, self.dragExitPathSpecification)

    def dragOver(self, event):
        DispatchEventForPath(event, self.model, self.dragOverPathSpecification)

    def dropActionChanged(self, event):
        DispatchEventForPath(event, self.model, self.dropActionChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicDropTargetListener)

from javax.swing.event import AncestorListener
class DynamicAncestorListener(AncestorListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "AncestorListener"
    dynamicClassName = "DynamicAncestorListener"
    fieldNames = ("ancestorMoved", "ancestorAdded", "ancestorRemoved", )

    def __init__(self, ancestorMoved="", ancestorAdded="", ancestorRemoved="", model=None):
        self.model = model
        self.ancestorMovedPathSpecification = ancestorMoved
        self.ancestorAddedPathSpecification = ancestorAdded
        self.ancestorRemovedPathSpecification = ancestorRemoved

    def ancestorMoved(self, event):
        DispatchEventForPath(event, self.model, self.ancestorMovedPathSpecification)

    def ancestorAdded(self, event):
        DispatchEventForPath(event, self.model, self.ancestorAddedPathSpecification)

    def ancestorRemoved(self, event):
        DispatchEventForPath(event, self.model, self.ancestorRemovedPathSpecification)

AllDynamicListenerClasses.append(DynamicAncestorListener)

from javax.swing.event import CaretListener
class DynamicCaretListener(CaretListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "CaretListener"
    dynamicClassName = "DynamicCaretListener"
    fieldNames = ("caretUpdate", )

    def __init__(self, caretUpdate="", model=None):
        self.model = model
        self.caretUpdatePathSpecification = caretUpdate

    def caretUpdate(self, event):
        DispatchEventForPath(event, self.model, self.caretUpdatePathSpecification)

AllDynamicListenerClasses.append(DynamicCaretListener)

from javax.swing.event import CellEditorListener
class DynamicCellEditorListener(CellEditorListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "CellEditorListener"
    dynamicClassName = "DynamicCellEditorListener"
    fieldNames = ("editingCanceled", "editingStopped", )

    def __init__(self, editingCanceled="", editingStopped="", model=None):
        self.model = model
        self.editingCanceledPathSpecification = editingCanceled
        self.editingStoppedPathSpecification = editingStopped

    def editingCanceled(self, event):
        DispatchEventForPath(event, self.model, self.editingCanceledPathSpecification)

    def editingStopped(self, event):
        DispatchEventForPath(event, self.model, self.editingStoppedPathSpecification)

AllDynamicListenerClasses.append(DynamicCellEditorListener)

from javax.swing.event import ChangeListener
class DynamicChangeListener(ChangeListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "ChangeListener"
    dynamicClassName = "DynamicChangeListener"
    fieldNames = ("stateChanged", )

    def __init__(self, stateChanged="", model=None):
        self.model = model
        self.stateChangedPathSpecification = stateChanged

    def stateChanged(self, event):
        DispatchEventForPath(event, self.model, self.stateChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicChangeListener)

from javax.swing.event import DocumentListener
class DynamicDocumentListener(DocumentListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "DocumentListener"
    dynamicClassName = "DynamicDocumentListener"
    fieldNames = ("changedUpdate", "insertUpdate", "removeUpdate", )

    def __init__(self, changedUpdate="", insertUpdate="", removeUpdate="", model=None):
        self.model = model
        self.changedUpdatePathSpecification = changedUpdate
        self.insertUpdatePathSpecification = insertUpdate
        self.removeUpdatePathSpecification = removeUpdate

    def changedUpdate(self, event):
        DispatchEventForPath(event, self.model, self.changedUpdatePathSpecification)

    def insertUpdate(self, event):
        DispatchEventForPath(event, self.model, self.insertUpdatePathSpecification)

    def removeUpdate(self, event):
        DispatchEventForPath(event, self.model, self.removeUpdatePathSpecification)

AllDynamicListenerClasses.append(DynamicDocumentListener)

from javax.swing.event import HyperlinkListener
class DynamicHyperlinkListener(HyperlinkListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "HyperlinkListener"
    dynamicClassName = "DynamicHyperlinkListener"
    fieldNames = ("hyperlinkUpdate", )

    def __init__(self, hyperlinkUpdate="", model=None):
        self.model = model
        self.hyperlinkUpdatePathSpecification = hyperlinkUpdate

    def hyperlinkUpdate(self, event):
        DispatchEventForPath(event, self.model, self.hyperlinkUpdatePathSpecification)

AllDynamicListenerClasses.append(DynamicHyperlinkListener)

from javax.swing.event import InternalFrameListener
class DynamicInternalFrameListener(InternalFrameListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "InternalFrameListener"
    dynamicClassName = "DynamicInternalFrameListener"
    fieldNames = ("internalFrameActivated", "internalFrameClosed", "internalFrameClosing", "internalFrameDeactivated", "internalFrameDeiconified", "internalFrameIconified", "internalFrameOpened", )

    def __init__(self, internalFrameActivated="", internalFrameClosed="", internalFrameClosing="", internalFrameDeactivated="", internalFrameDeiconified="", internalFrameIconified="", internalFrameOpened="", model=None):
        self.model = model
        self.internalFrameActivatedPathSpecification = internalFrameActivated
        self.internalFrameClosedPathSpecification = internalFrameClosed
        self.internalFrameClosingPathSpecification = internalFrameClosing
        self.internalFrameDeactivatedPathSpecification = internalFrameDeactivated
        self.internalFrameDeiconifiedPathSpecification = internalFrameDeiconified
        self.internalFrameIconifiedPathSpecification = internalFrameIconified
        self.internalFrameOpenedPathSpecification = internalFrameOpened

    def internalFrameActivated(self, event):
        DispatchEventForPath(event, self.model, self.internalFrameActivatedPathSpecification)

    def internalFrameClosed(self, event):
        DispatchEventForPath(event, self.model, self.internalFrameClosedPathSpecification)

    def internalFrameClosing(self, event):
        DispatchEventForPath(event, self.model, self.internalFrameClosingPathSpecification)

    def internalFrameDeactivated(self, event):
        DispatchEventForPath(event, self.model, self.internalFrameDeactivatedPathSpecification)

    def internalFrameDeiconified(self, event):
        DispatchEventForPath(event, self.model, self.internalFrameDeiconifiedPathSpecification)

    def internalFrameIconified(self, event):
        DispatchEventForPath(event, self.model, self.internalFrameIconifiedPathSpecification)

    def internalFrameOpened(self, event):
        DispatchEventForPath(event, self.model, self.internalFrameOpenedPathSpecification)

AllDynamicListenerClasses.append(DynamicInternalFrameListener)

from javax.swing.event import ListDataListener
class DynamicListDataListener(ListDataListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "ListDataListener"
    dynamicClassName = "DynamicListDataListener"
    fieldNames = ("contentsChanged", "intervalAdded", "intervalRemoved", )

    def __init__(self, contentsChanged="", intervalAdded="", intervalRemoved="", model=None):
        self.model = model
        self.contentsChangedPathSpecification = contentsChanged
        self.intervalAddedPathSpecification = intervalAdded
        self.intervalRemovedPathSpecification = intervalRemoved

    def contentsChanged(self, event):
        DispatchEventForPath(event, self.model, self.contentsChangedPathSpecification)

    def intervalAdded(self, event):
        DispatchEventForPath(event, self.model, self.intervalAddedPathSpecification)

    def intervalRemoved(self, event):
        DispatchEventForPath(event, self.model, self.intervalRemovedPathSpecification)

AllDynamicListenerClasses.append(DynamicListDataListener)

from javax.swing.event import ListSelectionListener
class DynamicListSelectionListener(ListSelectionListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "ListSelectionListener"
    dynamicClassName = "DynamicListSelectionListener"
    fieldNames = ("valueChanged", )

    def __init__(self, valueChanged="", model=None):
        self.model = model
        self.valueChangedPathSpecification = valueChanged

    def valueChanged(self, event):
        DispatchEventForPath(event, self.model, self.valueChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicListSelectionListener)

from javax.swing.event import MenuDragMouseListener
class DynamicMenuDragMouseListener(MenuDragMouseListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "MenuDragMouseListener"
    dynamicClassName = "DynamicMenuDragMouseListener"
    fieldNames = ("menuDragMouseDragged", "menuDragMouseEntered", "menuDragMouseExited", "menuDragMouseReleased", )

    def __init__(self, menuDragMouseDragged="", menuDragMouseEntered="", menuDragMouseExited="", menuDragMouseReleased="", model=None):
        self.model = model
        self.menuDragMouseDraggedPathSpecification = menuDragMouseDragged
        self.menuDragMouseEnteredPathSpecification = menuDragMouseEntered
        self.menuDragMouseExitedPathSpecification = menuDragMouseExited
        self.menuDragMouseReleasedPathSpecification = menuDragMouseReleased

    def menuDragMouseDragged(self, event):
        DispatchEventForPath(event, self.model, self.menuDragMouseDraggedPathSpecification)

    def menuDragMouseEntered(self, event):
        DispatchEventForPath(event, self.model, self.menuDragMouseEnteredPathSpecification)

    def menuDragMouseExited(self, event):
        DispatchEventForPath(event, self.model, self.menuDragMouseExitedPathSpecification)

    def menuDragMouseReleased(self, event):
        DispatchEventForPath(event, self.model, self.menuDragMouseReleasedPathSpecification)

AllDynamicListenerClasses.append(DynamicMenuDragMouseListener)

from javax.swing.event import MenuKeyListener
class DynamicMenuKeyListener(MenuKeyListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "MenuKeyListener"
    dynamicClassName = "DynamicMenuKeyListener"
    fieldNames = ("menuKeyPressed", "menuKeyReleased", "menuKeyTyped", )

    def __init__(self, menuKeyPressed="", menuKeyReleased="", menuKeyTyped="", model=None):
        self.model = model
        self.menuKeyPressedPathSpecification = menuKeyPressed
        self.menuKeyReleasedPathSpecification = menuKeyReleased
        self.menuKeyTypedPathSpecification = menuKeyTyped

    def menuKeyPressed(self, event):
        DispatchEventForPath(event, self.model, self.menuKeyPressedPathSpecification)

    def menuKeyReleased(self, event):
        DispatchEventForPath(event, self.model, self.menuKeyReleasedPathSpecification)

    def menuKeyTyped(self, event):
        DispatchEventForPath(event, self.model, self.menuKeyTypedPathSpecification)

AllDynamicListenerClasses.append(DynamicMenuKeyListener)

from javax.swing.event import MenuListener
class DynamicMenuListener(MenuListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "MenuListener"
    dynamicClassName = "DynamicMenuListener"
    fieldNames = ("menuCanceled", "menuDeselected", "menuSelected", )

    def __init__(self, menuCanceled="", menuDeselected="", menuSelected="", model=None):
        self.model = model
        self.menuCanceledPathSpecification = menuCanceled
        self.menuDeselectedPathSpecification = menuDeselected
        self.menuSelectedPathSpecification = menuSelected

    def menuCanceled(self, event):
        DispatchEventForPath(event, self.model, self.menuCanceledPathSpecification)

    def menuDeselected(self, event):
        DispatchEventForPath(event, self.model, self.menuDeselectedPathSpecification)

    def menuSelected(self, event):
        DispatchEventForPath(event, self.model, self.menuSelectedPathSpecification)

AllDynamicListenerClasses.append(DynamicMenuListener)

from javax.swing.event import MouseInputListener
class DynamicMouseInputListener(MouseInputListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "MouseInputListener"
    dynamicClassName = "DynamicMouseInputListener"
    fieldNames = ()

    def __init__(self, model=None):
        self.model = model

AllDynamicListenerClasses.append(DynamicMouseInputListener)

from javax.swing.event import PopupMenuListener
class DynamicPopupMenuListener(PopupMenuListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "PopupMenuListener"
    dynamicClassName = "DynamicPopupMenuListener"
    fieldNames = ("popupMenuCanceled", "popupMenuWillBecomeInvisible", "popupMenuWillBecomeVisible", )

    def __init__(self, popupMenuCanceled="", popupMenuWillBecomeInvisible="", popupMenuWillBecomeVisible="", model=None):
        self.model = model
        self.popupMenuCanceledPathSpecification = popupMenuCanceled
        self.popupMenuWillBecomeInvisiblePathSpecification = popupMenuWillBecomeInvisible
        self.popupMenuWillBecomeVisiblePathSpecification = popupMenuWillBecomeVisible

    def popupMenuCanceled(self, event):
        DispatchEventForPath(event, self.model, self.popupMenuCanceledPathSpecification)

    def popupMenuWillBecomeInvisible(self, event):
        DispatchEventForPath(event, self.model, self.popupMenuWillBecomeInvisiblePathSpecification)

    def popupMenuWillBecomeVisible(self, event):
        DispatchEventForPath(event, self.model, self.popupMenuWillBecomeVisiblePathSpecification)

AllDynamicListenerClasses.append(DynamicPopupMenuListener)

from javax.swing.event import TableColumnModelListener
class DynamicTableColumnModelListener(TableColumnModelListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "TableColumnModelListener"
    dynamicClassName = "DynamicTableColumnModelListener"
    fieldNames = ("columnAdded", "columnMarginChanged", "columnMoved", "columnRemoved", "columnSelectionChanged", )

    def __init__(self, columnAdded="", columnMarginChanged="", columnMoved="", columnRemoved="", columnSelectionChanged="", model=None):
        self.model = model
        self.columnAddedPathSpecification = columnAdded
        self.columnMarginChangedPathSpecification = columnMarginChanged
        self.columnMovedPathSpecification = columnMoved
        self.columnRemovedPathSpecification = columnRemoved
        self.columnSelectionChangedPathSpecification = columnSelectionChanged

    def columnAdded(self, event):
        DispatchEventForPath(event, self.model, self.columnAddedPathSpecification)

    def columnMarginChanged(self, event):
        DispatchEventForPath(event, self.model, self.columnMarginChangedPathSpecification)

    def columnMoved(self, event):
        DispatchEventForPath(event, self.model, self.columnMovedPathSpecification)

    def columnRemoved(self, event):
        DispatchEventForPath(event, self.model, self.columnRemovedPathSpecification)

    def columnSelectionChanged(self, event):
        DispatchEventForPath(event, self.model, self.columnSelectionChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicTableColumnModelListener)

from javax.swing.event import TableModelListener
class DynamicTableModelListener(TableModelListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "TableModelListener"
    dynamicClassName = "DynamicTableModelListener"
    fieldNames = ("tableChanged", )

    def __init__(self, tableChanged="", model=None):
        self.model = model
        self.tableChangedPathSpecification = tableChanged

    def tableChanged(self, event):
        DispatchEventForPath(event, self.model, self.tableChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicTableModelListener)

from javax.swing.event import TreeExpansionListener
class DynamicTreeExpansionListener(TreeExpansionListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "TreeExpansionListener"
    dynamicClassName = "DynamicTreeExpansionListener"
    fieldNames = ("treeCollapsed", "treeExpanded", )

    def __init__(self, treeCollapsed="", treeExpanded="", model=None):
        self.model = model
        self.treeCollapsedPathSpecification = treeCollapsed
        self.treeExpandedPathSpecification = treeExpanded

    def treeCollapsed(self, event):
        DispatchEventForPath(event, self.model, self.treeCollapsedPathSpecification)

    def treeExpanded(self, event):
        DispatchEventForPath(event, self.model, self.treeExpandedPathSpecification)

AllDynamicListenerClasses.append(DynamicTreeExpansionListener)

from javax.swing.event import TreeModelListener
class DynamicTreeModelListener(TreeModelListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "TreeModelListener"
    dynamicClassName = "DynamicTreeModelListener"
    fieldNames = ("treeNodesChanged", "treeNodesInserted", "treeNodesRemoved", "treeStructureChanged", )

    def __init__(self, treeNodesChanged="", treeNodesInserted="", treeNodesRemoved="", treeStructureChanged="", model=None):
        self.model = model
        self.treeNodesChangedPathSpecification = treeNodesChanged
        self.treeNodesInsertedPathSpecification = treeNodesInserted
        self.treeNodesRemovedPathSpecification = treeNodesRemoved
        self.treeStructureChangedPathSpecification = treeStructureChanged

    def treeNodesChanged(self, event):
        DispatchEventForPath(event, self.model, self.treeNodesChangedPathSpecification)

    def treeNodesInserted(self, event):
        DispatchEventForPath(event, self.model, self.treeNodesInsertedPathSpecification)

    def treeNodesRemoved(self, event):
        DispatchEventForPath(event, self.model, self.treeNodesRemovedPathSpecification)

    def treeStructureChanged(self, event):
        DispatchEventForPath(event, self.model, self.treeStructureChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicTreeModelListener)

from javax.swing.event import TreeSelectionListener
class DynamicTreeSelectionListener(TreeSelectionListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "TreeSelectionListener"
    dynamicClassName = "DynamicTreeSelectionListener"
    fieldNames = ("valueChanged", )

    def __init__(self, valueChanged="", model=None):
        self.model = model
        self.valueChangedPathSpecification = valueChanged

    def valueChanged(self, event):
        DispatchEventForPath(event, self.model, self.valueChangedPathSpecification)

AllDynamicListenerClasses.append(DynamicTreeSelectionListener)

from javax.swing.event import TreeWillExpandListener
class DynamicTreeWillExpandListener(TreeWillExpandListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "TreeWillExpandListener"
    dynamicClassName = "DynamicTreeWillExpandListener"
    fieldNames = ("treeWillCollapse", "treeWillExpand", )

    def __init__(self, treeWillCollapse="", treeWillExpand="", model=None):
        self.model = model
        self.treeWillCollapsePathSpecification = treeWillCollapse
        self.treeWillExpandPathSpecification = treeWillExpand

    def treeWillCollapse(self, event):
        DispatchEventForPath(event, self.model, self.treeWillCollapsePathSpecification)

    def treeWillExpand(self, event):
        DispatchEventForPath(event, self.model, self.treeWillExpandPathSpecification)

AllDynamicListenerClasses.append(DynamicTreeWillExpandListener)

from javax.swing.event import UndoableEditListener
class DynamicUndoableEditListener(UndoableEditListener):
    packageForListenerClass = "javax.swing.event"
    listenerClassName = "UndoableEditListener"
    dynamicClassName = "DynamicUndoableEditListener"
    fieldNames = ("undoableEditHappened", )

    def __init__(self, undoableEditHappened="", model=None):
        self.model = model
        self.undoableEditHappenedPathSpecification = undoableEditHappened

    def undoableEditHappened(self, event):
        DispatchEventForPath(event, self.model, self.undoableEditHappenedPathSpecification)

AllDynamicListenerClasses.append(DynamicUndoableEditListener)

